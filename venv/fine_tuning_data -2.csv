user_prompt,sql_query
Handling Null Values in Aggregations,"SELECT product_id, SUM(revenue) AS total_revenue FROM sales WHERE revenue IS NOT NULL GROUP BY product_id;"
Filtering by Multiple Conditions,"SELECT * FROM sales WHERE revenue > 1000 AND quantity_sold < 50 AND date BETWEEN '2024-01-01' AND '2024-12-31';"
Comparing Revenue Across Multiple Years,"SELECT product_id, YEAR(date) AS year, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id, YEAR(date) HAVING YEAR(date) BETWEEN 2022 AND 2024;"
Handling Missing Dates in Daily Sales,"SELECT date, COALESCE(SUM(sales), 0) AS total_sales FROM daily_sales WHERE date BETWEEN '2024-01-01' AND '2024-12-31' GROUP BY date ORDER BY date;"
Identifying Outliers in Sales Data,"SELECT product_id, AVG(sales) AS avg_sales, STDDEV(sales) AS stddev_sales FROM sales GROUP BY product_id HAVING AVG(sales) + 2 * STDDEV(sales) < MAX(sales);"
Handling Extreme Values,"SELECT product_id, MAX(revenue) AS max_revenue, MIN(revenue) AS min_revenue FROM sales WHERE revenue BETWEEN 0 AND 1000000 GROUP BY product_id;"
Joining Large Datasets,"SELECT a.product_id, b.supplier_id FROM sales a JOIN inventory b ON a.product_id = b.product_id WHERE a.date BETWEEN '2024-01-01' AND '2024-12-31';"
Handling High Data Cardinality,"SELECT customer_id, COUNT(DISTINCT product_id) AS unique_products FROM sales GROUP BY customer_id HAVING COUNT(DISTINCT product_id) > 10;"
Aggregating Over Dynamic Time Periods,"SELECT product_id, SUM(revenue) AS total_revenue FROM sales WHERE date >= CURDATE() - INTERVAL 90 DAY GROUP BY product_id;"
Handling Data with Time Zone Differences,"SELECT date, SUM(sales) AS total_sales FROM daily_sales WHERE date >= CONVERT_TZ(CURDATE(), 'UTC', 'America/New_York') GROUP BY date;"
Handling Zero and Negative Values in Financial Data,"SELECT product_id, SUM(CASE WHEN revenue < 0 THEN 0 ELSE revenue END) AS total_revenue FROM sales GROUP BY product_id;"
Aggregating with Sparse Data,"SELECT product_id, AVG(revenue) AS avg_revenue FROM sales WHERE revenue IS NOT NULL GROUP BY product_id;"
Handling Large Numbers of Join Conditions,"SELECT a.product_id, b.supplier_id FROM sales a JOIN suppliers b ON a.supplier_id = b.supplier_id WHERE a.date BETWEEN '2024-01-01' AND '2024-12-31' AND b.country IN ('USA', 'Canada');"
Detecting Data Entry Errors,"SELECT product_id, COUNT(*) AS entry_count FROM sales GROUP BY product_id HAVING COUNT(*) > 1000;"
Analyzing Trends in Seasonal Data,"SELECT product_id, CASE WHEN MONTH(date) IN (12, 1, 2) THEN 'Winter' WHEN MONTH(date) IN (3, 4, 5) THEN 'Spring' WHEN MONTH(date) IN (6, 7, 8) THEN 'Summer' WHEN MONTH(date) IN (9, 10, 11) THEN 'Fall' END AS season, SUM(sales) AS total_sales FROM sales GROUP BY product_id, season;"
Handling Non-Standard Date Formats,"SELECT STR_TO_DATE(date, '%Y-%m-%d') AS standard_date, SUM(sales) AS total_sales FROM daily_sales GROUP BY STR_TO_DATE(date, '%Y-%m-%d');"
Querying Sparse Time Intervals,"SELECT DATE_FORMAT(date, '%Y-%m-%d') AS day, SUM(sales) AS total_sales FROM daily_sales WHERE date IN (SELECT date FROM daily_sales WHERE sales IS NULL) GROUP BY DATE_FORMAT(date, '%Y-%m-%d');"
Identifying Customer Purchase Patterns,"SELECT customer_id, COUNT(DISTINCT product_id) AS unique_products, AVG(amount) AS avg_purchase_amount FROM sales GROUP BY customer_id HAVING COUNT(DISTINCT product_id) > 5 AND AVG(amount) > 50;"
Handling Overlapping Data Ranges,"SELECT product_id, SUM(revenue) AS total_revenue FROM sales WHERE date BETWEEN '2024-06-01' AND '2024-12-31' OR date BETWEEN '2024-01-01' AND '2024-03-31' GROUP BY product_id;"
Analyzing Sales Performance During Promotions,"SELECT product_id, SUM(sales) AS total_sales, SUM(CASE WHEN promotion_active = 1 THEN sales ELSE 0 END) AS promotional_sales FROM sales GROUP BY product_id;"