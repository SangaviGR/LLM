user_prompt,sql_query
"Total Revenue by Product Category Last Quarter","SELECT product_category, SUM(revenue) AS total_revenue FROM sales WHERE quarter = 'Q2 2024' GROUP BY product_category;"
"Sales Trends by Region for Last Year","SELECT region, MONTH(date) AS month, SUM(sales) AS total_sales FROM sales WHERE YEAR(date) = YEAR(CURRENT_DATE() - INTERVAL 1 YEAR) GROUP BY region, MONTH(date);"
"Top 5 Products with the Highest Profit Margin Last Month","WITH ProductProfits AS (SELECT product_id, SUM(profit) AS total_profit, SUM(revenue) AS total_revenue FROM sales WHERE MONTH(date) = MONTH(CURRENT_DATE() - INTERVAL 1 MONTH) GROUP BY product_id) SELECT product_id, (total_profit / total_revenue) * 100 AS profit_margin FROM ProductProfits ORDER BY profit_margin DESC LIMIT 5;"
"Daily Sales Distribution Over the Week","SELECT DAYOFWEEK(date) AS day_of_week, SUM(sales) AS total_sales FROM daily_sales WHERE date >= CURDATE() - INTERVAL 30 DAY GROUP BY DAYOFWEEK(date);"
"Weekly Sales Performance Comparison for Last Year","WITH WeeklySales AS (SELECT WEEK(date) AS week_num, SUM(sales) AS total_sales FROM daily_sales WHERE YEAR(date) = YEAR(CURRENT_DATE() - INTERVAL 1 YEAR) GROUP BY WEEK(date)) SELECT week_num, total_sales, LAG(total_sales) OVER (ORDER BY week_num) AS previous_week_sales, CASE WHEN LAG(total_sales) OVER (ORDER BY week_num) IS NULL THEN 0 ELSE ROUND(((total_sales - LAG(total_sales) OVER (ORDER BY week_num)) / LAG(total_sales) OVER (ORDER BY week_num)) * 100, 2) END AS sales_trend_percentage FROM WeeklySales ORDER BY week_num;"
"Inventory Turnover Ratio by Supplier","SELECT supplier_code, SUM(purchase) / NULLIF(SUM(sales), 0) AS inventory_turnover_ratio FROM ITR_Data GROUP BY supplier_code;"
"Top 10 Suppliers Based on Sales Margin","SELECT supplier, SUM(margin) AS total_margin FROM Supplier_Sales GROUP BY supplier ORDER BY total_margin DESC LIMIT 10;"
"Product Sales Performance Over Different Seasons","SELECT product_id, CASE WHEN MONTH(date) IN (12, 1, 2) THEN 'Winter' WHEN MONTH(date) IN (3, 4, 5) THEN 'Spring' WHEN MONTH(date) IN (6, 7, 8) THEN 'Summer' WHEN MONTH(date) IN (9, 10, 11) THEN 'Fall' END AS season, SUM(sales) AS total_sales FROM sales GROUP BY product_id, season;"
"Customer Spending Trends Over the Year","SELECT customer_id, MONTH(date) AS month, SUM(amount) AS total_spent FROM sales WHERE YEAR(date) = YEAR(CURRENT_DATE()) GROUP BY customer_id, MONTH(date);"
"Average Stock Age by Brand","SELECT brand_name, AVG(no_of_days) AS avg_stock_age FROM Stock_Age_Supplier_Master GROUP BY brand_name;"
"Monthly Sales Comparison Year-over-Year","WITH MonthlySales AS (SELECT YEAR(date) AS year, MONTH(date) AS month, SUM(sales) AS total_sales FROM sales GROUP BY YEAR(date), MONTH(date)) SELECT current_year.year AS year, current_year.month AS month, current_year.total_sales AS current_month_sales, previous_year.total_sales AS previous_month_sales, CASE WHEN previous_year.total_sales IS NULL THEN 0 ELSE ROUND(((current_year.total_sales - previous_year.total_sales) / previous_year.total_sales) * 100, 2) END AS sales_growth_percentage FROM MonthlySales current_year LEFT JOIN MonthlySales previous_year ON current_year.month = previous_year.month AND current_year.year = previous_year.year + 1 ORDER BY year, month;"
"Top 10 Products by Revenue for This Year","SELECT product_id, SUM(revenue) AS total_revenue FROM sales WHERE YEAR(date) = YEAR(CURRENT_DATE()) GROUP BY product_id ORDER BY total_revenue DESC LIMIT 10;"
"Customer Purchase Frequency Analysis","SELECT customer_id, COUNT(*) AS purchase_count FROM sales GROUP BY customer_id ORDER BY purchase_count DESC;"
"Average Daily Sales by Month for the Current Year","SELECT MONTH(date) AS month, AVG(sales) AS avg_daily_sales FROM daily_sales WHERE YEAR(date) = YEAR(CURRENT_DATE()) GROUP BY MONTH(date);"
"Total Revenue by Region for the Last Quarter","SELECT region, SUM(revenue) AS total_revenue FROM sales WHERE quarter = 'Q2 2024' GROUP BY region;"
"Product Sales Growth Comparison","WITH ProductGrowth AS (SELECT product_id, SUM(sales) AS total_sales, LAG(SUM(sales)) OVER (PARTITION BY product_id ORDER BY YEAR(date), MONTH(date)) AS previous_sales FROM sales GROUP BY product_id, YEAR(date), MONTH(date)) SELECT product_id, total_sales, previous_sales, CASE WHEN previous_sales IS NULL THEN 0 ELSE ROUND(((total_sales - previous_sales) / previous_sales) * 100, 2) END AS sales_growth_percentage FROM ProductGrowth;"
"Highest Revenue Generating Day Last Year","SELECT date, SUM(revenue) AS total_revenue FROM sales WHERE YEAR(date) = YEAR(CURRENT_DATE() - INTERVAL 1 YEAR) GROUP BY date ORDER BY total_revenue DESC LIMIT 1;"
"Sales and Profit by Product Category This Month","SELECT product_category, SUM(sales) AS total_sales, SUM(profit) AS total_profit FROM sales WHERE MONTH(date) = MONTH(CURRENT_DATE()) AND YEAR(date) = YEAR(CURRENT_DATE()) GROUP BY product_category;"
"Average Revenue per Customer This Year","SELECT customer_id, AVG(amount) AS avg_revenue FROM sales WHERE YEAR(date) = YEAR(CURRENT_DATE()) GROUP BY customer_id;"
"Stock Turnover Rate by Supplier","SELECT supplier_code, (SUM(purchase) / NULLIF(SUM(stock), 0)) AS turnover_rate FROM Stock_Age_Supplier_Master GROUP BY supplier_code;"
"Best Performing Sales Representative This Year","SELECT sales_rep_id, SUM(sales) AS total_sales FROM sales WHERE YEAR(date) = YEAR(CURRENT_DATE()) GROUP BY sales_rep_id ORDER BY total_sales DESC LIMIT 1;"
"Revenue Distribution Across Different Product Sizes","SELECT size, SUM(revenue) AS total_revenue FROM sales GROUP BY size;"
"Sales Volume Trend Over the Past Year","SELECT MONTH(date) AS month, SUM(sales) AS total_sales FROM sales WHERE YEAR(date) = YEAR(CURRENT_DATE() - INTERVAL 1 YEAR) GROUP BY MONTH(date);"
"Total Discounts Given by Region","SELECT region, SUM(discount_amount) AS total_discounts FROM sales GROUP BY region;"
"Customer Retention Analysis","SELECT customer_id, COUNT(DISTINCT YEAR(date)) AS years_active FROM sales GROUP BY customer_id HAVING years_active > 1;"
"Product Profitability by Season","SELECT product_id, CASE WHEN MONTH(date) IN (12, 1, 2) THEN 'Winter' WHEN MONTH(date) IN (3, 4, 5) THEN 'Spring' WHEN MONTH(date) IN (6, 7, 8) THEN 'Summer' WHEN MONTH(date) IN (9, 10, 11) THEN 'Fall' END AS season, SUM(profit) AS total_profit FROM sales GROUP BY product_id, season;"
"Top 5 Most Frequently Purchased Products","SELECT product_id, COUNT(*) AS purchase_count FROM sales GROUP BY product_id ORDER BY purchase_count DESC LIMIT 5;"
"Sales Performance Comparison by Store","SELECT store_id, SUM(sales) AS total_sales FROM sales GROUP BY store_id;"
"Total Revenue and Profit by Quarter","SELECT quarter, SUM(revenue) AS total_revenue, SUM(profit) AS total_profit FROM sales GROUP BY quarter;"
"Average Sales per Weekday","SELECT DAYOFWEEK(date) AS weekday, AVG(sales) AS avg_sales FROM daily_sales GROUP BY DAYOFWEEK(date);"
"Year-over-Year Revenue Change by Product Category","WITH YearlySales AS (SELECT product_category, YEAR(date) AS year, SUM(revenue) AS total_revenue FROM sales GROUP BY product_category, YEAR(date)) SELECT current.year AS year, current.product_category, current.total_revenue AS current_year_revenue, previous.total_revenue AS previous_year_revenue, CASE WHEN previous.total_revenue IS NULL THEN 0 ELSE ROUND(((current.total_revenue - previous.total_revenue) / previous.total_revenue) * 100, 2) END AS revenue_change_percentage FROM YearlySales current LEFT JOIN YearlySales previous ON current.product_category = previous.product_category AND current.year = previous.year + 1 ORDER BY current.product_category, year;"